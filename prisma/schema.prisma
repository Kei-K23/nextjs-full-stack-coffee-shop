generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Replace with your database URL
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  isAdmin        Boolean         @default(false)
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]

  coinBalance Int               @default(0)
  orders      Order[]           @relation("UserOrders")
  coinTxns    CoinTransaction[] @relation("UserCoinTransactions")

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  UserAnalytics UserAnalytics[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Authenticator {
  id                  String  @id @default(cuid())
  credentialID        String  @unique
  userId              String
  credentialPublicKey String
  counter             Int
  transports          String?
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coffee {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  coinPrice   Int
  imageUrl    String?
  ingredients String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderDetails     OrderDetails[]
  ProductAnalytics ProductAnalytics[]
}

model Order {
  id             String      @id @default(cuid())
  userId         String
  user           User        @relation("UserOrders", fields: [userId], references: [id])
  orderStatus    OrderStatus
  totalPrice     Float
  totalCoinsUsed Int         @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  orderDetails    OrderDetails[]
  payment         Payment?
  coinTransaction CoinTransaction? @relation("OrderCoinTransaction")
}

model OrderDetails {
  id        String   @id @default(cuid())
  orderId   String
  coffeeId  String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order  Order  @relation(fields: [orderId], references: [id])
  coffee Coffee @relation(fields: [coffeeId], references: [id])
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus
  transactionId String        @unique
  amountPaid    Float
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id])
}

model CoinTransaction {
  id              String          @id @default(cuid())
  userId          String
  transactionType TransactionType
  coins           String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user    User    @relation("UserCoinTransactions", fields: [userId], references: [id])
  orderId String? @unique
  order   Order?  @relation("OrderCoinTransaction", fields: [orderId], references: [id])
}

model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SalesAnalytics {
  id             String   @id @default(cuid())
  totalRevenue   Float    @default(0.0)
  totalOrders    Int      @default(0)
  totalItemsSold Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ProductAnalytics {
  id              String    @id @default(cuid())
  coffeeId        String
  totalSales      Int       @default(0)
  totalRevenue    Float     @default(0.0)
  lastPurchasedAt DateTime?
  coffee          Coffee    @relation(fields: [coffeeId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model UserAnalytics {
  id          String    @id @default(cuid())
  userId      String
  totalSpent  Float     @default(0.0)
  totalOrders Int       @default(0)
  lastOrderAt DateTime?
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum OrderStatus {
  Pending
  Paid
  Cancelled
  Completed
}

enum PaymentMethod {
  CreditCard
  PayPal
  Cash
}

enum PaymentStatus {
  Pending
  Paid
  Failed
}

enum TransactionType {
  Earned
  Spent
}
